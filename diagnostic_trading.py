#!/usr/bin/env python3
"""
Script de diagn√≥stico para el sistema de trading
Verifica la conexi√≥n, se√±ales y apertura de posiciones
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ConnectionFxcm import RobotConnection
from PriceAnalyzer import PriceAnalyzer
from ConfigurationOperation import TradingConfig
import pandas as pd
import datetime as dt
import traceback

def test_connection():
    """Prueba la conexi√≥n a FXCM"""
    print("=== PRUEBA DE CONEXI√ìN ===")
    try:
        robot_conn = RobotConnection()
        connection = robot_conn.getConnection()
        
        if connection:
            print("‚úÖ Conexi√≥n FXCM establecida correctamente")
            print(f"Usuario: {TradingConfig.userid}")
            print(f"URL: {TradingConfig.url}")
            print(f"Tipo: {TradingConfig.connectiontype}")
            return connection
        else:
            print("‚ùå No se pudo establecer conexi√≥n")
            return None
    except Exception as e:
        print(f"‚ùå Error en conexi√≥n: {e}")
        print(traceback.format_exc())
        return None

def test_price_data(connection):
    """Prueba la obtenci√≥n de datos de precios"""
    print("\n=== PRUEBA DE DATOS DE PRECIOS ===")
    try:
        analyzer = PriceAnalyzer(days=7, instrument="EUR/USD", timeframe="m1")
        
        # Obtener datos
        df = analyzer.get_price_data("EUR/USD", "m1", 7, connection)
        
        if df is None or df.empty:
            print("‚ùå No se obtuvieron datos de precios")
            return None
        
        print(f"‚úÖ Datos obtenidos: {len(df)} filas")
        print(f"Rango de fechas: {df['date'].min()} - {df['date'].max()}")
        print(f"√öltimos precios: {df['bidclose'].tail(5).tolist()}")
        
        return df
    except Exception as e:
        print(f"‚ùå Error obteniendo datos: {e}")
        print(traceback.format_exc())
        return None

def test_indicators(df):
    """Prueba la generaci√≥n de indicadores"""
    print("\n=== PRUEBA DE INDICADORES ===")
    try:
        analyzer = PriceAnalyzer(days=7, instrument="EUR/USD", timeframe="m1")
        
        # Generar indicadores
        df_with_indicators = analyzer.set_indicators(df)
        
        if df_with_indicators is None or df_with_indicators.empty:
            print("‚ùå No se generaron indicadores")
            return None
        
        print(f"‚úÖ Indicadores generados: {len(df_with_indicators)} filas")
        
        # Verificar columnas importantes
        required_columns = ['peaks_min', 'peaks_max', 'trend', 'min_low_flat_zone', 'max_high_flat_zone']
        missing_columns = [col for col in required_columns if col not in df_with_indicators.columns]
        
        if missing_columns:
            print(f"‚ùå Columnas faltantes: {missing_columns}")
        else:
            print("‚úÖ Todas las columnas requeridas est√°n presentes")
        
        # Mostrar estad√≠sticas de indicadores
        if 'peaks_min' in df_with_indicators.columns:
            peaks_min_count = df_with_indicators['peaks_min'].sum()
            print(f"Picos m√≠nimos: {peaks_min_count}")
        
        if 'peaks_max' in df_with_indicators.columns:
            peaks_max_count = df_with_indicators['peaks_max'].sum()
            print(f"Picos m√°ximos: {peaks_max_count}")
        
        if 'trend' in df_with_indicators.columns:
            trend_counts = df_with_indicators['trend'].value_counts()
            print(f"Distribuci√≥n de tendencias: {trend_counts.to_dict()}")
        
        return df_with_indicators
    except Exception as e:
        print(f"‚ùå Error generando indicadores: {e}")
        print(traceback.format_exc())
        return None

def test_signals(df):
    """Prueba la generaci√≥n de se√±ales"""
    print("\n=== PRUEBA DE SE√ëALES ===")
    try:
        analyzer = PriceAnalyzer(days=7, instrument="EUR/USD", timeframe="m1")
        
        # Generar se√±ales
        df_with_signals = analyzer.set_signals_to_trades(df)
        
        if df_with_signals is None or df_with_signals.empty:
            print("‚ùå No se generaron se√±ales")
            return None
        
        print(f"‚úÖ Se√±ales generadas: {len(df_with_signals)} filas")
        
        # Verificar se√±ales
        if 'signal' in df_with_signals.columns:
            signal_counts = df_with_signals['signal'].value_counts()
            print(f"Distribuci√≥n de se√±ales: {signal_counts.to_dict()}")
            
            # Buscar se√±ales recientes
            recent_signals = df_with_signals.tail(10)
            buy_signals = recent_signals[recent_signals['signal'] == 1]
            sell_signals = recent_signals[recent_signals['signal'] == -1]
            
            print(f"Se√±ales de compra en √∫ltimas 10 velas: {len(buy_signals)}")
            print(f"Se√±ales de venta en √∫ltimas 10 velas: {len(sell_signals)}")
            
            if not buy_signals.empty:
                print(f"√öltima se√±al de compra: {buy_signals.iloc[-1]['date']}")
            if not sell_signals.empty:
                print(f"√öltima se√±al de venta: {sell_signals.iloc[-1]['date']}")
        
        return df_with_signals
    except Exception as e:
        print(f"‚ùå Error generando se√±ales: {e}")
        print(traceback.format_exc())
        return None

def test_trade_opening(df):
    """Prueba la apertura de trades"""
    print("\n=== PRUEBA DE APERTURA DE TRADES ===")
    try:
        analyzer = PriceAnalyzer(days=7, instrument="EUR/USD", timeframe="m1")
        
        # Verificar si hay operaciones existentes
        has_buy = analyzer.existingOperation("EUR/USD", "B")
        has_sell = analyzer.existingOperation("EUR/USD", "S")
        
        print(f"Operaci√≥n de compra existente: {has_buy}")
        print(f"Operaci√≥n de venta existente: {has_sell}")
        
        # Verificar cooldown
        has_recent = analyzer._has_recent_open(cooldown_minutes=10)
        print(f"Cooldown activo (√∫ltimos 10 min): {has_recent}")
        
        # Intentar procesar se√±ales
        analyzer.triggers_trades_open(df)
        
        print("‚úÖ Procesamiento de se√±ales completado")
        
    except Exception as e:
        print(f"‚ùå Error en apertura de trades: {e}")
        print(traceback.format_exc())

def main():
    """Funci√≥n principal de diagn√≥stico"""
    print("üîç DIAGN√ìSTICO DEL SISTEMA DE TRADING")
    print("=" * 50)
    
    # 1. Probar conexi√≥n
    connection = test_connection()
    if not connection:
        print("\n‚ùå No se puede continuar sin conexi√≥n")
        return
    
    # 2. Probar datos de precios
    df = test_price_data(connection)
    if df is None:
        print("\n‚ùå No se puede continuar sin datos")
        return
    
    # 3. Probar indicadores
    df_with_indicators = test_indicators(df)
    if df_with_indicators is None:
        print("\n‚ùå No se puede continuar sin indicadores")
        return
    
    # 4. Probar se√±ales
    df_with_signals = test_signals(df_with_indicators)
    if df_with_signals is None:
        print("\n‚ùå No se puede continuar sin se√±ales")
        return
    
    # 5. Probar apertura de trades
    test_trade_opening(df_with_signals)
    
    print("\n" + "=" * 50)
    print("üèÅ DIAGN√ìSTICO COMPLETADO")
    
    # Guardar datos para inspecci√≥n
    df_with_signals.to_csv("diagnostic_data.csv", index=False)
    print("üìÅ Datos guardados en 'diagnostic_data.csv' para inspecci√≥n manual")

if __name__ == "__main__":
    main()
